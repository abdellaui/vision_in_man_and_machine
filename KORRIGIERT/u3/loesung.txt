Abdullah Sahin

3.2)

2D-Faltung:
~~~~~~~~~~~
Addition: N^2 * (M^2-1)

Multiplikation: N^2 * M^2

Gesamt: N^2 * (2*M^2 - 1)

// Punkte: 3/3

#---------------------------------------

3.3)
kernel_l0_d0_real  [ 25 x 25 ]   : 0.493633s
kernel_l0_d1_real  [ 25 x 25 ]   : 0.486918s
kernel_l0_d2_real  [ 25 x 25 ]   : 0.487203s
kernel_l0_d3_real  [ 25 x 25 ]   : 0.489664s
kernel_l0_d4_real  [ 25 x 25 ]   : 0.484492s
kernel_l0_d5_real  [ 25 x 25 ]   : 0.479258s
kernel_l0_d6_real  [ 25 x 25 ]   : 0.489142s
kernel_l0_d7_real  [ 25 x 25 ]   : 0.483794s
kernel_l1_d0_real  [ 33 x 33 ]   : 0.824725s
kernel_l1_d1_real  [ 33 x 33 ]   : 0.829284s
kernel_l1_d2_real  [ 33 x 33 ]   : 0.827779s
kernel_l1_d3_real  [ 33 x 33 ]   : 0.829999s
kernel_l1_d4_real  [ 33 x 33 ]   : 0.864285s
kernel_l1_d5_real  [ 33 x 33 ]   : 0.863749s
kernel_l1_d6_real  [ 33 x 33 ]   : 0.98715s
kernel_l1_d7_real  [ 33 x 33 ]   : 0.956766s
kernel_l2_d0_real  [ 47 x 47 ]   : 1.7513s
kernel_l2_d1_real  [ 47 x 47 ]   : 1.88033s
kernel_l2_d2_real  [ 47 x 47 ]   : 1.74674s
kernel_l2_d3_real  [ 47 x 47 ]   : 1.71947s
kernel_l2_d4_real  [ 47 x 47 ]   : 1.70262s
kernel_l2_d5_real  [ 47 x 47 ]   : 1.71292s
kernel_l2_d6_real  [ 47 x 47 ]   : 1.89099s
kernel_l2_d7_real  [ 47 x 47 ]   : 1.73429s
kernel_l3_d0_real  [ 67 x 67 ]   : 3.73044s
kernel_l3_d1_real  [ 67 x 67 ]   : 3.74604s
kernel_l3_d2_real  [ 67 x 67 ]   : 3.85743s
kernel_l3_d3_real  [ 67 x 67 ]   : 3.73631s
kernel_l3_d4_real  [ 67 x 67 ]   : 3.43492s
kernel_l3_d5_real  [ 67 x 67 ]   : 3.36594s
kernel_l3_d6_real  [ 67 x 67 ]   : 3.32138s
kernel_l3_d7_real  [ 67 x 67 ]   : 3.33105s
kernel_l4_d0_real  [ 95 x 95 ]   : 6.63632s
kernel_l4_d1_real  [ 95 x 95 ]   : 6.94668s
kernel_l4_d2_real  [ 95 x 95 ]   : 6.67737s
kernel_l4_d3_real  [ 95 x 95 ]   : 6.64725s
kernel_l4_d4_real  [ 95 x 95 ]   : 6.74506s
kernel_l4_d5_real  [ 95 x 95 ]   : 6.5768s
kernel_l4_d6_real  [ 95 x 95 ]   : 6.57531s
kernel_l4_d7_real  [ 95 x 95 ]   : 6.62861s

// Beantwortung der Frage fehlt (passen die Ergebnisse zur theoretischen Voraussage?)
// -0.5

// Punkte: 1.5/2

#---------------------------------------

3.4)
Separierbarkeit in Bezug auf Filtermasken folgt aus der Assoziativität des * (asteriks) Operators.
Das Ergebnis einer Faltung ist unabhängig davon, ob man ein Bild nacheinander mit vielen kleinen Filtern faltet,
oder zunächst aus den kleinen Filtern eine großen Filter erstellt und das Bild damit faltet.


Statt eine große Filtermaske (n x m) auf ein Bild (a x b) anzuwenden mit einem Laufzeit von O(a*b*n*m), 
ist es effizienter - falls möglich - diese Maske in kleinere Filtermasken (n x 1, 1 x m) zu separieren und anzuwenden. 
Somit spart man Rechenzeit, da diese Vorgehensweise eine Laufzeit von O(a*b*(n+m)) hat.

Separierte Sobelfilter:
~~~~~~~~~~~~~~~~~~~~~~~
S_x = [1; 2; 1] * [1, 0, -1];
S_y = [1; 0; -1] * [1, 2, 1];


2-mal 1D-Faltung:
~~~~~~~~~~~~~~~~~
Addition pro Maske: N^2 * (M-1)

Multiplikation pro Maske: N^2 * (M)

pro Maske Gesamt: N^2 * (2*M - 1)

Gesamt: 2 * (N^2 * (2*M - 1))

// Für M = 2 werden noch ungefähr gleich viele Operationen gebraucht, ab M = 3 ist sie schneller:
Ab M > 1 ist die separierte Faltung schneller.

// Punkte: 5/5
